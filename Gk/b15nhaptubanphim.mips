.data
	str1: .asciiz "so phan tu la: "
	A:    .space 100
	message:.asciiz	"arrayChange = "
.text
main:
	li $v0 , 4
	la $a0 , str1
	syscall
	
	li $v0 , 5
	syscall
	addu $t1 , $0 , $v0 # t1 = n
	
	li $s0 , 0 # i = 0
	
	la 	$t0 , A
	la 	$t7,  A

increase:
	add 	$t2 , $s0 , $s0
	add	$t2 , $t2 , $t2		#t2 = 4*i
	add	$t0 , $t2 , $t7		#&A = &A+4i
	
nhap:   li $v0 , 5
	syscall
	sw $v0,($t0)
	
	addi $s0 , $s0 , 1 # i+=1
	
	slt $s7 , $s0 , $t1
	beq $s7 , $0 , end_nhap
	j increase
end_nhap:
	li	$a1, 0		# step = 0
	jal	arrayChange
exit:
	nop
	la	$a0, message # in arrayChange =
	li	$v0, 4
	syscall
	
	addi	$a0, $a1, 0 # in step
	li	$v0, 1
	syscall
	
	li	$v0, 10 # exit
	syscall
end_main:


arrayChange:
	addi $s0, $0, 0
	addi $t3, $t7, 0	#khoi tao lai t3 = &(A)
loop:	
	addi	$s0, $s0, 1	#s0 = i =1
	sll 	$s7, $s0, 2	#s7 = 4*i
	add  	$t2, $t3, $s7	#t2 = &(A+1) + 4i
	
	slt	$s2, $s0, $t1	# if i > n then break
	beq	$s2, 0, end_loop
	
	lw	$s1, 0($t2)	# s1 = A[i]
	lw	$s3, -4($t2)	# s3 = A[i-1]
	slt	$s4, $s3, $s1	# if A[i] <= A[i-1] s4 = 0
	bne	$s4, 0, loop	# else continue
	sub	$s5, $s3, $s1	# s5 = A[i-1] - A[i]
	add	$a1, $a1, $s5	# move += s5
	addi	$a1, $a1, 1	# move += 1
	addi	$s1, $s3, 1	# A[i] = A[i-1] + 1
	sw	$s1, 0($t2)
	
	j	loop
end_loop:
	jr	$ra
